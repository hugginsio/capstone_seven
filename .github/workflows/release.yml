name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14.15.1'
    - uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - run: npm ci
    - run: npm run electron:build
    
    - name: Identify Executable Path
      id: executable
      shell: pwsh
      run: (gci -file .\release\*.exe).FullName

    - name: Parse Version
      id: version
      shell: pwsh
      run: (gci -file .\release\*.exe).Name | % {$_.substring($_.length-9, 5) -replace '^[a-z]'}

    - name: Parse Name
      id: name
      shell: pwsh
      run: (gci -file .\release\*.exe).Name

    - name: Release
      id: create_release
      uses: actions/create-release@v1
      with:
        draft: false
        prerelease: false
        release_name: v${{ steps.version.outputs.version }}@${{ github.sha }}
        tag_name: ${{ github.ref }}
        body: |
          Release requested by ${{ github.actor }} on commit ${{ github.sha }}.
          (${{ github.run_id }} at ${{ github.ref }}, ${{ github.event_name }})
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload Artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.executable.outputs.executable }}
        asset_name: ${{ steps.name.outputs.name }}
        asset_content_type: application/vnd.microsoft.portable-executable